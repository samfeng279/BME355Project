function xdot = double_pendulum_ODE(t,x,TA,S)
% DOUBLE_PENDULUM_ODE Ordinary differential equations for double pendulum.
%
%   author:  Alexander Erlich (alexander.erlich@gmail.com)
%
%   parameters:
%
%   t       Column vector of time points 
%   xdot    Solution array. Each row in xdot corresponds to the solution at a
%           time returned in the corresponding row of t.
%
%   This function calls is called by double_pendulum.
%
%   ---------------------------------------------------------------------

%ivp=[phi1; dtphi1; phi2; dtphi2; g; m1; m2; l1; l2];
g=x(5); m1=x(6); m2=x(7); l1=x(8); l2=x(9);

taLength = StabilityModel.tibialisLength(pi-x(1)-x(3));
dTA = .03;
fTA = 2000;
taMoment = fTA*TA.forceLengthSE(TA.getNormalizedLengthSE(taLength,x(10)))*dTA;

sLength = StabilityModel.soleusLength(pi-x(1)-x(3));
dS = .05;
fS = 2000;
sMoment = fS*S.forceLengthSE(S.getNormalizedLengthSE(sLength,x(11)))*dS;

%t

xdot=zeros(11,1);

xdot(1)=x(2);

xdot(2)=-((g*(2*m1+m2)*sin(x(1))+m2*(g*sin(x(1))+...
    l1*x(2)^2*cos(x(1)))*sin(x(1)))/...
    (2*l1*(m1+m2-m2*cos(x(1))^2)));

% xdot(2)=-((g*(2*m1+m2)*sin(x(1))+m2*(g*sin(x(1)-2*x(3))+2*(l2*x(4)^2+...
%     l1*x(2)^2*cos(x(1)-x(3)))*sin(x(1)-x(3))))/...
%     (2*l1*(m1+m2-m2*cos(x(1)-x(3))^2)));

xdot(3)=x(4);


xdot(10) = TA.getVelocity(aTA,x(10),TA.getNormalizedLengthSE(taLength,x(10)));
xdot(11) = S.getVelocity(aS,x(11),TA.getNormalizedLengthSE(sLength,x(11)));

xdot(4)=(((m1+m2)*(l1*x(2)^2+g*cos(x(1)))+l2*m2*x(4)^2*cos(x(1)-x(3)))*...
    sin(x(1)-x(3))+taMoment-sMoment)/(l2*(m1+m2-m2*cos(x(1)-x(3))^2));